1. Using Max Heap as Priority Queue:

We can utilize max heaps as priority queues: the root always holds the element with highest priority, or in the maximum value.
- Insertion and extraction of the maximum element take (O(log n)) time.
- Pseudocode:
       plaintext
     MaxHeapPriorityQueue:
         insert(element):
             heap.insert(element)
             heapify_up(element)
         extract_max():
             max_element = heap.extract_max()
             return max_element


2. Using Max Heap as Min Heap:

When repurposing a max heap as a min heap, one must negate all values during the process of inserting and extracting elements.
- This transformation preserves the heap structure while reversing the order of elements.
- Pseudocode:
       plaintext
     MaxHeapAsMinHeap:
         insert(element):
             heap.insert(-element)
             heapify_up(-element)
         extract_min():
             max_element = heap.extract_max()
             return -max_element

By leveraging the existing implementation of max heaps, we can efficiently utilize them as both priority queues and min heaps through this approach.
