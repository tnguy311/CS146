Problem 1:

- Best Case: (O(n)) - When the array is already sorted, Insertion Sort runs in linear time as it only needs to iterate through the array once to check the elements.
- Average Case: (O(n^2)) - In the average case, where elements are randomly ordered, Insertion Sort takes quadratic time as it needs to compare and potentially move each element multiple times.
- Worst Case: (O(n^2)) - When the array is sorted in reverse order, Insertion Sort becomes inefficient, requiring a quadratic number of comparisons and swaps.

In summary, Insertion Sort's time complexity is (O(n)) for the best case and (O(n^2)) for both the average and worst cases. 
Insertion Sort works best when the list is already in order, but it can be slow if the list is in reverse order or if it's not too disorder.
