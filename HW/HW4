Problem 1:

-Best Case: (O(n)) - When the array is already sorted, Insertion Sort runs in linear time as it only needs to iterate through the array once to check the elements.
-Average Case: (O(n^2)) - In the average case, where elements are randomly ordered, Insertion Sort takes quadratic time as it needs to compare and potentially move each element multiple times.
-Worst Case: (O(n^2)) - In the worst case, where the array is in reverse order. The insertion sort becomes inefficient and need a quadratic number of comparisons/swaps.

The time complexity for Insertion Sort for best case is (O(n)), and (O(n^2)) for the average cases and worst cases,
the Insertion Sort works best when the list is already in order, but it can be slow if the list is in reverse order or if it's too large.
